Sublime-Urtext Documentation 

Updated: April 29, 2019
Version: 0.4

{{
Sublime Urtext Documentation 79811024084551
├── Example Tree 79810802082407
├── What Sublime-Urtext Is 79810915120529
│   ├── Urtext is a syntax I invented for writing and organizing in plaintext. 79810915120430
│   └── Ideas Behind Urtext 79810729063456
│       ├── Basic Requirements: 79810822061956
│       ├── Additional Features: 79810729061009
│       └── Characteristics 79810729060942
├── Using this document 79810822101322
├── How to set it up 79810913063747
├── Basics: 79810913063739
├── like this text 79810913060421
├── Inline Node Trees 79810822060133
├── Linking Nodes: 79810913063734
├── Seeing Node Relationships: 79810913063730
├── File Organization: 79810913063726
│   └── Traverse Mode 79810822055818
├── Metadata (This tag overrides the default title) 79810913063707
├── Finding nodes via Metadata: 79810913063640
├── Dynamic Nodes 79810911080130
│   ├── Example Source Node 1 79810822101015
│   ├── Example Source Node 2 79810822101016
│   ├── Example Source Node 3 79810822101018
│   ├── Example Source Node 4 79810822101019
│   ├── Example Dynamic Node Title 79810822085456
│   └── Node Definition for the Table of Contents 79810802081948
├── Timestamps: 79810913063635
├── Timeline View: 79810913063637
├── Filenames: 79810913063623
├── Node IDs: 79810913063619
├── Linking to URLS and to Files Outside the Project: 79810822062009
├── Syntax Highlighting and Readability 79810822064026
└── Key Bindings: 79810822064039
/-- ID: 79810802082407
title: Example Tree
kind: dynamic
defined in: -> 79810802081948
 --/ }}

{{  What Sublime-Urtext Is                                                                       /--ID:79810915120529--/
    {{ 
    Urtext is a syntax I invented for writing and organizing in plaintext.      /--ID:79810915120430;tag:definition--/}}
    Sublime is a modern, programmable text editor. 

    This is an implementation of Urtext in Sublime Text 3. I call it Sublime-Urtext. 

{{  Ideas Behind Urtext

    Urtext is a system and a syntax for writing and structuring files in plaintext. There are many tools available for writing and organizing. None of them were what I wanted, so I wrote my own.

    The Urtext idea could be implemented using any text editor with built-in or supplemental scripting/automation, a web application, or pencil and paper along with human sorting and organizing routines. The version in Sublime is just an example implementation that uses the scripting capability of Sublime Text 3.

    {{  Basic Requirements:

        The original requirements were stringent enough to eliminate every tool already available:

            All in plain text. No proprietary file formats or structure. Usable across multiple platforms and devices.

            Allow both organized and disorganized use. Structured but flexible, all-purpose syntax that allows freeform writing without adapting to a preexisting interface or feature set. Permit gradual aggregation of content with other content.

            Be undistracted by interacting with the file system (naming, saving, organizing of files).  

            Customizable metadata, without relying on the file system.        

            Content at least partially editable and organizable from mobile devices.        

            Be capable of hyperlinks, both within/among the files and to outside resources. Function as an all-purpose reference system that can link to anything.         

            Pieces of content should be able to connect to one another in a tree-like as well as non-hierarchical way, such as wiki or flat database style. Files must be able to able to have multiple, not just single, tree-like or other relationships.
            
            Extensible and customizable. This year's needs might not be next year's needs.

            Does not require years to master. (I'm looking at you, Org Mode. I gave you a good solid try.)

            Future-proof. No reliance on anything that may no longer exist in 10 or 100 years.
                                                                                               /--ID:79810822061956--/}}
    {{  Additional Features:

            In addition to the requirements above, I wanted the following features found in various other text-oriented tools:

            Basic syntax highlighting, if only to delineate content from structural/syntactical elements of the tool.

            Fuzzy search within files
                - This is already implemented in most modern desktop editors and some mobile text editors, but I wanted the tool to have its own version of this that didn't rely on the editor environment.   

            Version control (using Git, for example).
                - This possiblity is implicit in the commitment to plaintext, but it's important enough to mention.
                                                                                               /--ID:79810729061009--/}}

    {{  Characteristics

        As a result of the above, Urtext came out having the following characteristics:
       
            It has two components:

                I. Static plaintext files in a loosely specified syntax.

                II. A processor that reads, organizes, and compiles the files.

            Like any data format (such as JSON, XML, etc.), the processing could be done in any language, given the right rules. This particular implementation uses Python, embedded into a Sublime plugin to provide more Sublime-specific editing tools, also using Python, which is Sublime's scripting language.

            The processor could run on demand or continuously in "watchdog" mode. (The latter was inspired by the ``npm run watch`` tool for React development.) In Sublime Urtext, it runs in watchdog mode, but the underlying Python module has its own watchdog that could run outside of Sublime Text, continuously monitoring files independently of an  editor.

            Content is plain text. No reliance on proprietary applications, formats, platforms.

            There is no need to interact directly with a file system dialog or manually organize files. 

            There is no subfolder organization scheme. All files are kept in a single folder. Organization of files, file groups, and file relationships is entirely done within the system. This makes it easy to sync and use across devices and file systems where file and folder paths may not always resolve uniformly, and it avoids broken file paths from moved/renamed/reorganized files.

            Filenaming is automatic using a 14-digit derivation of creation time, which also ensures every filename is unique. Further manual naming is possible, provided the 14 digit string is retained in the filename.
           
            It has a somewhat code-like appearance in the editor. It can also be formatted, spaced, cleaned, and organized like

                                                                                        /-- ID:79810729060942 --/ }}
                                                                                             /--ID:79810729063456--/}} 
                                                                                                                      }}
{{  Using this document

    This file is an Urtext node with several sub-nodes. It can be used in Sublime Text to try out the features described. For the purpose of this documentation, the 'Super' key is Command key on Mac, Windows key on Windows.
                                                                                               /--ID:79810822101322--/}}

{{  How to set it up

    - You'll need an empty Sublime Project. Create one by opening a new empty folder (File -> Open) and then save it as a project (Project -> Save Project As ...).

    - You are prompted to save a file with a .sublime-project extension. Name it anything, save it anywhere you like. For simplicity, you could save it inside the empty folder you just created. 

    Your .sublime-project file might look like this:
    SCOPE-JSON
            
            {
                "folders":
                [
                    {
                        "path": "/Users/YourName/Documents/new project",
                    },
                ],
                "settings":
                {
                    "always_prompt_for_file_reload": false,
                    "tab_size": 2
                },
                
            }
            
    END-JSON

    Whenever you want to use the project, select Project -> Quick Switch Project (Ctrl-Cmd-P), and select the Urtext project. 

    For some basic syntax highlighting that makes it easier to use, select the Sixteen (for light) or the Monokai (for dark) color schemes in Preferences -> Color Scheme ... See 79810822064026 for more on syntax highlighting.
                                                                                               /--ID:79810913063747--/}}

{{  Basics:                                                                                      /--ID:79810913063739--/

    Text is kept in nodes. A node can be a single file but a single file can also contain multiple nodes. Think of a node as a blank piece of paper, but it can be any length. 

    To create a new empty node press Control-Shift-; (Control-Shift-semicolon). There is no need to make a filename or interact with a file system dialog. The new node has whitespace on top and metadata tag with a node ID. By default, the first non-whitespace line is read as the node title. Write a title and anything else into the node. Save it with Command-S.

    Once you have multiple nodes, press Super-E or select "Urtext: Show All Nodes" from the Sublime command palette (Shift-Command-P) to browse them. Nodes are sorted by their time of creation, with the most recent first. They can also be sorted by index (see below). Find a node by typing part of its title. Open a node by selecting it and pressing enter. }}

{{  Inline Nodes                                                                 
    
    Inline nodes are nested inside of other nodes, whether the parent node is a file or another inline node. The syntax for inline nodes is to wrap the content in double squiggly brackets, {{ like this text /-- ID:79810913060421 --/ }}. To create an empty inline node, Shift-Ctrl-Super-; (Shift-Control-Super-semicolon). To wrap existing content into an inline node, use the same keypress with the content selected. Inside the double squiggly brackets is a new node with an auto-generated ID.

    Using inline nodes requires attention to syntax : every opening doubly squiggly bracket must be closed in the same file and requires an ID metadata tag between the opening an closing brackets, not nested in another node.

    Inline nodes have their own identity in both content and metadata for all purposes within Urtext. Inline nodes can be nested arbitrarily deep.

    {{ Inline Node Trees

        For a diagram of all inline nodes within a single file, select "Urtext: Show Inline Node Tree" from the Sublime Command Palette.
        This tree is navigable using Traverse Mode (Super-R)                                   /--ID:79810822060133--/}}
                                                                                                                    

{{ Linking Nodes:                                                                             /-- ID:79810913063734 --/

    Elaborate systems are possible by linking nodes together. Since node IDs are 14 digits long (see below), any 14 digits in an Urtext project are treated as a link. Press Shift-Ctrl-/ on a line containing a link to open the node with the linked ID. 

    Linking does not require a filename, only a 14-digit Node ID (created automatically when a new node is made). Any other information around the Node ID (such as the rest of the filename, or arbitrary text), will be ignored. See below for more information on file naming and Node IDs.

    Two Sublime Command Palette commands can make linking quick and easy:

    Urtext : Link To ...
        Links from the currently viewed node to another node which you can select in the selection panel. When you select a node in the quick panel, a link to that node will be inserted at the cursor.

    Urtext: Link From ...
        Links TO the current node FROM another node. When you select this command, a link to the current node will be copied to the clipboard. You can then paste the reference into the node you open in the quick panel. }}

{{ Seeing Node Relationships:                                                                 /-- ID:79810913063730 --/

    When two or more nodes are interlinked, you can view a tree of all nodes that link into and out of a given node, to any depth. Start by viewing any node either containing a link or having another node containing a link to itself. Select "Urtext: Show Node Relationships ... " from the Command Palette. }}

{{ File Organization:                                                                         /-- ID:79810913063726 --/
    
    Instead of a folder tree, Urtext uses nodeviews. A nodeview is a structured list or diagram of many nodes, itself written in plain text. It works like a virtual file tree.

    To make a nodeview, write several node links into a single node, with or without additional text or formatting. You can structure it arbitrarily: as a list, outline, tab-delimited nesting, in prose, etc.

    {{ Traverse Mode:                                                   /-- ID:79810822055818; title: Traverse Mode --/

        Once you have a node view, you can navigate it like a file tree by turning on Traverse mode (Ctrl-R). Traverse mode will open a second Sublime pane. As you navigate the nodeview in the left pane with the cursor or mouse, the selected node shows on the right pane. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.
        
            The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. Note that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal.
          }}

    All nodes are kept in a single project folder. It makes a single project easy to sync and use across multiple file systems where file and folder paths may not always resolve uniformly. It also avoids the need to interact directly with the file system to sort, organize and find files.

}}
    
{{ Metadata:                                                                                  /-- ID:79810913063707 --/

    Metadata is enclosed in a forward-slashes followed or preceded by two dashes. Slash-double-dash begins metadata, double-dash-slash ends metadata. Example:

        /-- example_key: value --/

    Other than two reserved words (see below), metadata can be have aribitrary names and values, with open-ended length. Keys and values of metadata tags are indexed automatically.

    Each metadata entry can be written on its own line, in the format:
        
        <optional key> : <optional value with optional timestamp> 

    For example:

            /-- Purpose : work-related <Tue., Mar. 05, 2019, 03:25 PM> --/
    Or:

            /-- kind: gift list --/

    You can also string several entries together on one line, separated by a semicolon:

            /-- note: example note ; tag: groceries --/

    Note that: 

        - a colon separates the metadata name from the value 

        - All three values are optional.

        - A timestamp anywhere in the value will be indexed as the timestamp for the whole entry. If you put more than one timestamp in an entry, only the first one is read.
        
        - Indexing of metadata key names is not case-sensitive.

    There are two reserved metadata names:

        title:

            If for some reason you want to override the automatic title and assign a title manually, add a title tag to the metadata block:

            /-- title: Metadata (This tag overrides the default title)  --/

        index:

            You can optionally add a two-digit sort index (00-99) to a node, such as:

            /-- index: 03 --/

            Index tags will sort the files in the node browser (Super-E). Any indexed nodes will before (above) the others, with lowest number appearing first. Remember unindexed notes display in order of creation, newest first. You can give the same index number to multiple nodes; in this case they sort with the most recent node first, within each index.

            See Filenames for another way to use for indexes. }}
    
{{ Finding nodes via Metadata:                                                                /-- ID:79810913063640 --/

    To navigate to nodes using their metadata, use the "Find By Meta" command in Command Palette. Select the tag name and then "<all>" or a tag value. A nodeview matching the selection will be written into a new buffer. }}

{{ Dynamic Nodes
    
    Dynamic nodes compile and update content from other nodes in real time. Dynamic node definitions are enclosed in double square brackets and can be inserted into any node arbitrarily. Press Ctrl-Shift-] to insert a dynamic node definition.

    The definition has the following keys:
        
        - ID: (Required) : This will be auto-populated by Sublime when using the shortcut above; however you can also replace it with the ID of another node. For example, if you want the contents to replace an existing node, copy and paste that node's ID. If you want it to populate new inline node, create that node and then copy/paste it's ID. Otherwise, a new file will be created with the specified ID.

        - include:metadata:<tag name>:<tag values> (optional) : Include nodes with this metadata key and value. Keys and values are chained together and separated by the colon (:) as shown above. To include multiple key/value pairs, write multiple lines.

        - exclude:metadata:<tag name>:<tag values> (optional) : Exclude nodes with this metadata key and value. Keys and values are strung together and separated by the colon (:) as shown above. To exclude multiple key/value pairs, write multiple lines. Exclude lines will always supersede include lines, no matter the order. 

        - sort:index (optional) : How to sort the nodes in the dynamically populated node. Currently, this can be only be 'index'. (sort:index)

        - metadata:<tag name>:<value> (optional) : Metadata to add to the dynamically populated node. This can be any metadata, including the reserved title and index keys.

    Dynamic nodes will always automatically include the metadata key 'defined in' which will point to the node containing its definition.

    Example:

        Here are four inline nodes with example tags and indexes.

            {{ Example Source Node 1
                    Some text here.
                 /-- ID:79810822101015; tag: example_node; index:02 --/ }}
            {{ Example Source Node 2
                 /-- ID:79810822101016; tag: example_node; index:05 --/ }}
            {{ Example Source Node 3
                 /-- ID:79810822101018; tag: example_node; index:01 --/ }}
            {{ Example Source Node 4
                 /-- ID:79810822101019; tag: example_node; index:05  --/ }}


        Here is an example dynamic node definition targeting node ID 79810822085456

            [[ ID:79810822085456
                include:metadata:tag:example_node
                exclude:metadata:tag:exclude_this
                sort:index
                show:title
                metadata:title:Example Dynamic Node Title
            ]]

        And here is the node with ID 79810822085456:

            {{ 
 Example Source Node 3  79810822101018
Example Source Node 1  79810822101015
Example Source Node 2  79810822101016
Example Source Node 4  79810822101019
/-- ID: 79810822085456
title: Example Dynamic Node Title
kind: dynamic
defined in: -> 79810911080130
 --/ }}

        Changing the dynamic definition and/or the contents or metadata of the source nodes will update the dynamic node. (Saving is necessary to trigger the update.)

        {{ Node Definition for the Table of Contents

            Here is another example dynamic definition, which creates the tree at the top of this file:
                [[ ID:79810802082407
                    tree:79811024084551
                    metadata:title:Example Tree
                 ]]  

            Changing the titles or nesting of sections will dynamically update the tree.
                                                                                               /--ID:79810802081948--/}}
                                                                                               /--ID:79810911080130--/}}


{{ Timestamps:                                                                                   /--ID:79810913063635--/

    Timestamps: Urtext utilizes human-readable Timestamps in the format: <Thu., Feb. 07, 2019, 05:57 PM>. In Sublime, insert one anywhere by pressing Control-T. Timestamps can be written inline or as elements of metadata (see below). Urtext parses timestamps throughout the project, not only in the metadata block. }}

{{ Timeline View:                                                                                /--ID:79810913063637--/

    A Timeline View gives scans the project for timestamps (defined above) and shows them in chronological order with nearby text. Press Ctrl-Shift-T or select Urtext: Show Timeline in the Sublime command palette. As everywhere in a project, nodes can be opened using Ctrl-/.  }}

{{ Filenames:                                                                                    /--ID:79810913063623--/

    Other than the 14-digit node ID created by Urtext (see 79810913063619), file names are arbitrary. You can use any naming convention you want to make filenames easy for purposes such as browsing files via the file system, reading and editing nodes using mobile apps, etc. The 14-digit node ID must appear someplace in the filename.

    Urtext can rename files automatically in a few convenient formats based on their title and/or index. Renaming by index is useful if you want to see nodes appear in a file system, mobile app, or other app's file browser in the same order as they appear within Sublime Urtext. Note that files renamed using this feature still contain the Node ID, since Urtext requires it.

    To rename a file, select "Rename File from Meta" from the command palette (Command-P). This will rename the file in one of the following schema:

    If an index is present:

        <index> <title> <node id>.txt

    If no index is present:

        <node id> <title>.txt

    This system preserves automatic numerical sorting within the filesystem, such that the most recent un-indexed nodes appear first. If you want to use another system, such as putting the title first, you can do so. Any naming system will work as long as the node ID is somewhere in the filename.
                                                                                                                      }}
{{ Node IDs:                                                                                     /--ID:79810913063619--/

    Nodes have 14-digit ID numbers. The 14 digits are an inverse representation of the year, month, day, hour, minute and second they were created. The operating system's file-created or file-modified metadata is avoided because it can be too easily and involuntarily overwritten under ordinary file system operations such as copying and moving files or folders. Creation date is inverted in filenames to force files sorting with the most recent node first. It's useful in mobile applications that have limited or inconvenient filelist sorting and viewing capabilities. 
    
  }}
  
{{ Linking to URLS and to Files Outside the Project:

    Ctrl-/ works to open a link anywhere in an Urtext project. The syntax for making a link is:

        <any text> -> <link to anything> | <any other text>

    Command palette. HTTP (internet) URLs are recognized and open in the default browser, such as -> www.google.com  | You can link to assets (img, pdf, etc.) within the Urtext project using the native folder separators for your operating system. 

                                                                                               /--ID:79810822062009--/}}

{{  Syntax Highlighting and Readability

        Sublime Urtext offers some basic syntax highlighting by extending the Sixteen and Monokai color scheme in Sublime. It also has a syntax definition .YML file that can be used to add syntax highlighting in other color schemes.

                                                                                               /--ID:79810822064026--/}}


{{ Key Bindings: 

    The 'Super' key is Command on Mac, Windows key on Windows.

    ctrl+shift+;            New Node
    super+e                 Node Browser 
    ctrl+shift+l            update_file
    super+r                 Toggle Traverse Mode
    ctrl+shift+s.           Auto rename file from node metadata
    ctrl+shift+/            Open node (from an ID on the same line) 
    ctrl+shift+super+;      New inline node
    ctrl+shift+[            New inline node from selection
    ctrl+t                  Insert timestamp
    ctrl+shift+]            New dynamic node definition
    ctrl+shift+t            Timeline view
                                                                                           /-- ID:79810822064039 --/ }}

 
                                                                                                                    /--
                                                                                                     ID: 79811024084551
                                                                                                           tags: urtext
                                                                                    title: Sublime Urtext Documentation
                                                                                                                    --/
                                                                                  